CREATE TABLE IF NOT EXISTS users (
  user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email varchar NOT NULL UNIQUE,
  login varchar,
  user_name varchar DEFAULT 'incognito',
  birthday date
  CONSTRAINT not_empty_email_and_login CHECK(email <> '' AND login <> '')
);

CREATE TABLE IF NOT EXISTS friendships (
  user_id integer,
  friend_id integer,
  confirmed boolean
);

CREATE TABLE IF NOT EXISTS films (
  film_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  film_name varchar(200) NOT NULL,
  film_description varchar(200) DEFAULT 'not presented',
  release_date date,
  duration integer CHECK (duration > 0),
  rate smallint DEFAULT 11 CHECK (rate >= 0),
  mpa_rating_id integer
);

CREATE TABLE IF NOT EXISTS likes (
  film_id integer REFERENCES films (film_id) ON DELETE CASCADE,
  user_id integer REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS genres (
  genre_id integer PRIMARY KEY,
  genre_name varchar(20)
);

CREATE TABLE IF NOT EXISTS film_genres (
  film_id integer REFERENCES films (film_id) ON DELETE CASCADE,
  genre_id integer REFERENCES genres (genre_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS mpa_ratings (
  mpa_rating_id integer PRIMARY KEY,
  rating_name varchar(10),
  rating_description varchar
);

ALTER TABLE friendships ADD FOREIGN KEY (friend_id) REFERENCES users (user_id) ON DELETE CASCADE;

ALTER TABLE friendships ADD FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE;

ALTER TABLE films ADD FOREIGN KEY (mpa_rating_id) REFERENCES mpa_ratings (mpa_rating_id);

ALTER TABLE friendships ADD CONSTRAINT IF NOT EXISTS unique_user_and_friend_id UNIQUE (user_id, friend_id);

ALTER TABLE likes ADD CONSTRAINT IF NOT EXISTS unique_user_and_film_id UNIQUE (film_id, user_id);

ALTER TABLE film_genres ADD CONSTRAINT IF NOT EXISTS unique_film_and_genre_id UNIQUE (film_id, genre_id);
